#!/bin/bash

set -u

# For more info, see:
# https://docs.docker.com/docker-hub/builds/advanced/
# https://web.archive.org/web/20201002130055/https://dev.to/samuelea/automate-your-builds-on-docker-hub-by-writing-a-build-hook-script-13fp

VCS_REF=$SOURCE_COMMIT
BUILD_DATE=$(date --utc +%Y-%m-%dT%H:%M:%S%Z)

cut_tag_field() { echo "$DOCKER_TAG" | cut --delimiter="-" --fields="$1"; }

if [[ $DOCKER_TAG == "latest" ]]
then
    # Default OS:
    BASE_OS="debian"
    # `debian:latest` will get latest *stable*, which has between 1.5 to 2 years old,
    # well-tested software. While that is suitable for servers etc., this Docker image
    # does not need highest stability. More recent features are more important (e.g. for
    # pandoc). Debian's `testing` branch sounds cutting-edge but is roughly 6 months old
    # software, so should be stable enough here.
    # This image's main component, TeXLive, is largely unaffected by this anyway.
    OS_VERSION="testing"
    # Installation script takes care of finding the appropriate version of TeXLive
    # for the 'latest' tag:
    TL_VERSION=${DOCKER_TAG}
else
    # Otherwise, take versions as manually specified in build process.
    #
    # This assumes tags in the form: '<baseos>-<version>-texlive-<version>',
    # e.g. 'debian-10-texlive-2019'
    #
    # E.g. 'debian'
    BASE_OS=$(cut_tag_field 1)
    # Version e.g. '10' for Debian, but can also be 'buster', see:
    # https://wiki.debian.org/DebianReleases
    # These are the available versions:
    # https://hub.docker.com/_/debian?tab=tags
    OS_VERSION=$(cut_tag_field 2)
    # E.g. '2020':
    TL_VERSION=$(cut_tag_field 4)
fi

docker build \
    --build-arg VCS_REF="$VCS_REF" \
    --build-arg BUILD_DATE="$BUILD_DATE" \
    --build-arg BASE_OS="$BASE_OS" \
    --build-arg OS_VERSION="$OS_VERSION" \
    --build-arg TL_VERSION="$TL_VERSION" \
    --tag "$IMAGE_NAME" .
